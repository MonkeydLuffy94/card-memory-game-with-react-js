{"version":3,"sources":["Components/Card/batman.png","Components/Card/Card.js","Components/CardDeck.js","Components/Dropdown.js","Components/MemoryGame.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","face","className","error","isFlipped","onClick","dataItem","width","height","src","batman","alt","CardDeck","rowNumber","colNumber","createCard","i","viewFaces","key","selectedCardIndex","findErrorCard","createCardDeckRow","cardDeckRow","j","push","cardDeckComponent","createCardDeck","Dropdown","name","label","value","options","onChange","map","option","actualCardFaces","concat","element","index","id","shuffle","array","length","Math","floor","random","cardNumberOptions","MemoryGame","handleTime","timeRemaining","state","console","log","setState","handleClick","cardFaces","JSON","parse","stringify","cardFace","flippedForMatch","gameStatus","life","find","card","pairMatched","isGameEnd","clickedCardIndex","handleGameControl","forEach","viewFace","undefined","gameStatusInfo","renderLifeList","lifeArray","handleDropdown","e","boardColOptions","boardRowOptions","target","isRowChange","getAttribute","newColNumber","newRowNumber","halfNumberCards","newBoardColOptions","filter","col","newBoardRowOptions","handleSettings","isSettingsOpened","handleTimeIcon","handleTheme","currentTheme","themeOptions","prevProps","prevState","snapshot","this","setTimeout","prevGameStatus","prevTimeRemaining","timeID","setInterval","clearInterval","root","document","documentElement","style","setProperty","toLocaleLowerCase","type","max","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,oC,yPC2B5BC,EAvBF,SAACC,GAAW,IACfC,EAASD,EAATC,KAUR,OACE,yBAAKC,UAAS,gBALIF,EAAVG,MACI,cAAmB,KAK7B,yBAAKD,UAAS,eAVTD,EAAKG,UAAY,YAAc,IAUGC,QAASL,EAAMK,SACpD,yBAAKH,UAAU,wBAAwBD,EAAKK,UAC5C,yBAAKJ,UAAU,uBACb,yBAAKK,MAAM,OAAOC,OAAO,OAAOC,IAAKC,IAAQC,IAAI,cC+B5CC,EAhDE,SAACZ,GAAW,IACnBa,EAAyBb,EAAzBa,UAAWC,EAAcd,EAAdc,UACbC,EAAa,SAACC,GAAO,IACjBC,EAAcjB,EAAdiB,UAMR,OACE,kBAAC,EAAD,CACEC,IAAG,cAASF,GACZX,QAAS,kBAAML,EAAMK,QAAQW,IAC7Bf,KAAMgB,EAAUD,GAChBb,MATkB,WAAO,IACnBA,EAA6BH,EAA7BG,MAAOgB,EAAsBnB,EAAtBmB,kBACf,OAAOhB,GAASgB,IAAsBH,EAO7BI,MAKPC,EAAoB,SAACL,GAEzB,IADA,IAAMM,EAAc,GACXC,EAAI,EAAGA,EAAIT,EAAWS,IAC7BD,EAAYE,KAAKT,EAAWC,EAAIO,IAGlC,OAAOD,GAgBT,OACE,yBAAKpB,UAAS,8BAAyBW,EAAzB,YAAsCC,IAd/B,WAErB,IADA,IAAMW,EAAoB,GACjBT,EAAI,EAAGA,EAAIH,EAAWG,IAC7BS,EAAkBD,KAChB,yBAAKtB,UAAU,gBAAgBgB,IAAG,cAASF,IACxCK,EAAkBP,EAAYE,KAKrC,OAAOS,EAKJC,KC1BQC,EAlBE,SAAC3B,GAAW,IACnB4B,EAAgC5B,EAAhC4B,KAAMC,EAA0B7B,EAA1B6B,MAAOC,EAAmB9B,EAAnB8B,MAAOC,EAAY/B,EAAZ+B,QAC5B,OACE,yBAAK7B,UAAW0B,GACd,+BACGC,EACD,4BAAQC,MAAOA,EAAOE,SAAUhC,EAAMgC,SAAUJ,KAAMA,GACnDG,EAAQE,KAAI,SAACC,GAAD,OACX,4BAAQJ,MAAOI,EAAQhB,IAAK,MAAQgB,GACjCA,UCNTC,G,MAAkB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAE1ClB,EAAYkB,EAAgBC,OAAOD,GAEvClB,EAAYA,EAAUgB,KAAI,SAACI,EAASC,GAClC,MAAO,CACLC,GAAID,EACJhC,SAAU+B,EACVjC,WAAW,MAIf,IAAMoC,EAAU,SAACC,GACf,IAAK,IAAIzB,EAAIyB,EAAMC,OAAS,EAAG1B,EAAI,EAAGA,IAAK,CACzC,IAAIO,EAAIoB,KAAKC,MAAMD,KAAKE,UAAY7B,EAAI,IADC,EAElB,CAACyB,EAAMlB,GAAIkB,EAAMzB,IAAvCyB,EAAMzB,GAFkC,KAE9ByB,EAAMlB,GAFwB,OAM7CiB,EAAQvB,GAER,IAEM6B,EAAoB,CAAC,EAAG,EAAG,EAAG,GAkbrBC,E,kDAxab,WAAY/C,GAAQ,IAAD,8BACjB,cAAMA,IAiIRgD,WAAa,WAAO,IACVC,EAAkB,EAAKC,MAAvBD,cACRE,QAAQC,IAAI,2BACZ,EAAKC,UAAS,iBAAO,CACnBJ,cAAeA,EAAgB,OAtIhB,EA0InBK,YAAc,SAACtC,GACb,IAAMuC,EAAYC,KAAKC,MAAMD,KAAKE,UAAU,EAAKR,MAAMjC,YACjD0C,EAAWJ,EAAUvC,GAFR,EAG2B,EAAKkC,MAA3CU,EAHW,EAGXA,gBAAiBC,EAHN,EAGMA,WAAYC,EAHlB,EAGkBA,KAjJb,wBAkJpBD,IACED,GAAmBD,EAASvD,UACNmD,EAAUQ,MAAK,SAACC,GACtC,GACEA,EAAKzB,KAAOoB,EAASpB,KACpByB,EAAK5D,WACN4D,EAAK1D,WAAaqD,EAASrD,SAC3B,CACAqD,EAASvD,WAAY,EADrB,MAE8C,EAAK8C,MAA3CrC,EAFR,EAEQA,UAAWC,EAFnB,EAEmBA,UAAWmD,EAF9B,EAE8BA,YAIxBC,EAAYD,IAAiBpD,EAAYC,EAAa,EAAI,EAWhE,OARA,EAAKuC,UAAS,iBAAO,CACnBpC,UAAWsC,EACXK,iBAAiB,EACjBK,YAAaA,EAAc,EAC3B9D,OAAO,EACPgE,iBAAkBnD,EAClB6C,WAAYK,EAvKT,WADW,2BA0KT,EAGT,OAAO,OAIPP,EAASvD,WAAY,EACrB,EAAKiD,UAAS,iBAAO,CACnBpC,UAAWsC,EACXpD,OAAO,EACPgE,iBAAkBnD,EAClB8C,KAAMA,EAAO,QAIjBH,EAASvD,WAAY,EACrB,EAAKiD,UAAS,iBAAO,CACnBpC,UAAWsC,EACXK,iBAAiB,EACjBO,iBAAkBnD,SA1LP,EAgMnBoD,kBAAoB,WAAO,IACjBP,EAAe,EAAKX,MAApBW,WACR,GAxMmB,mBAwMfA,GArMS,aAqMwBA,EAAyB,CAC5D,IAAI5C,EAAYuC,KAAKC,MAAMD,KAAKE,UAAU,EAAKR,MAAMjC,YACrDA,EAAUoD,SAAQ,SAACC,GACjBA,EAASlE,WAAY,KAGvBoC,EAAQvB,GAER,EAAKoC,UAAS,iBAAO,CACnBpC,UAAWA,EACX4C,WAjNqB,uBAkNrBI,YAAa,EACbL,iBAAiB,EACjBO,sBAAkBI,EAClBpE,OAAO,EACP2D,KAAM,EACNb,cA3NqB,UASR,EAuNnBuB,eAAiB,WAAO,IACdX,EAAe,EAAKX,MAApBW,WACR,MA/NmB,mBA+NZA,EACH,aA/NqB,yBAgOrBA,EACA,qBAhOoB,wBAiOpBA,EACA,2BACA,0BA/Na,EAkOnBY,eAAiB,SAACX,GAEhB,IADA,IAAIY,EAAY,GACP1D,EAAI,EAAGA,EAAI8C,EAAM9C,GAAK,EAC7B0D,EAAUlD,KACR,wBAAIN,IAAKF,GACP,uBAAGd,UAAU,mBAKnB,OAAOwE,GA5OU,EA+OnBC,eAAiB,SAACC,GAAO,IAAD,EAOlB,EAAK1B,MALPrC,EAFoB,EAEpBA,UACAC,EAHoB,EAGpBA,UACA+C,EAJoB,EAIpBA,WACAgB,EALoB,EAKpBA,gBACAC,EANoB,EAMpBA,gBAGF,GA9PmB,mBA8PfjB,GA3PS,aA2PwBA,EAAyB,CAY5D,IAXA,IAAM/B,EAAQ8C,EAAEG,OAAOjD,MAIjBkD,EAA6B,gBAFhBJ,EAAEG,OAAOE,aAAa,QAInCC,EAAeF,EAAclE,EAAYgB,EACzCqD,EAAeH,EAAclD,EAAQjB,EAErCuE,EAAmBF,EAAeC,EAAgB,EACpDhD,EAAkB,GACbnB,EAAI,EAAGA,EAAIoE,EAAiBpE,IACnCmB,EAAgBX,KAAKR,GAGvB,IAAIC,EAAYkB,EAAgBC,OAAOD,IAUvB,SAACM,GACf,IAAK,IAAIzB,EAAIyB,EAAMC,OAAS,EAAG1B,EAAI,EAAGA,IAAK,CACzC,IAAIO,EAAIoB,KAAKC,MAAMD,KAAKE,UAAY7B,EAAI,IADC,EAElB,CAACyB,EAAMlB,GAAIkB,EAAMzB,IAAvCyB,EAAMzB,GAFkC,KAE9ByB,EAAMlB,GAFwB,MAM7CiB,CAfAvB,EAAYA,EAAUgB,KAAI,SAACI,EAASC,GAClC,MAAO,CACLC,GAAID,EACJhC,SAAU+B,EACVjC,WAAW,OAaf,IAAIiF,EAAqBL,EACrBlC,EAAkBwC,QAAO,SAACC,GACxB,OAAOzD,EAAQ,IAAM,GAAWyD,EAAM,IAAM,KAE9CV,EAEAW,EAAsBR,EAItBF,EAHAhC,EAAkBwC,QAAO,SAACC,GACxB,OAAOzD,EAAQ,IAAM,GAAWyD,EAAM,IAAM,KAIlD,EAAKlC,UAAS,iBAAO,CACnBpC,UAAWA,EACXJ,UAAWsE,EACXrE,UAAWoE,EACXL,gBAAiBQ,EACjBP,gBAAiBU,QA5SJ,EAiTnBC,eAAiB,WAAO,IACdC,EAAqB,EAAKxC,MAA1BwC,iBACR,EAAKrC,UAAS,iBAAO,CAAEqC,kBAAmBA,OAnTzB,EAsTnBC,eAAiB,WAAO,IACd9B,EAAe,EAAKX,MAApBW,WAOR,MApUmB,mBA+TjBA,GA9TuB,yBA8TUA,EAC7B,yBA9TkB,wBA+TlBA,EACA,gCACA,wBA7TW,EAiUnB+B,YAAc,SAAChB,GACb,IAAM9C,EAAQ8C,EAAEG,OAAOjD,MACvB,EAAKuB,UAAS,iBAAO,CAAEwC,aAAc/D,OAjUrC,EAAKoB,MAAQ,CACXjC,UAAWA,EACXJ,UAhBmB,EAiBnBC,UAhBmB,EAiBnB8C,iBAAiB,EACjBO,sBAAkBI,EAClBN,YAAa,EACb9D,OAAO,EACP2D,KAAM,EACND,WAjBiB,iBAkBjBiB,gBAAiBhC,EACjB+B,gBAAiB/B,EACjBG,cAvBuB,IAwBvByC,kBAAkB,EAClBI,aAAc,CAAC,OAAQ,OAAQ,SAAU,OAAQ,SACjDD,aAzBe,QAQA,E,+DAqBAE,EAAWC,EAAWC,GAAW,IAAD,SACaC,KAAKhD,MAA3D/C,EADyC,EACzCA,MAAOgE,EADkC,EAClCA,iBAAkBN,EADgB,EAChBA,WAAYgC,EADI,EACJA,aAI7C,GAAI1F,EAAO,CACT,IAAMoD,EAAYC,KAAKC,MAAMD,KAAKE,UAAUwC,KAAKhD,MAAMjC,YACvDsC,EAAUY,GAAkB/D,WAAY,EACxC+F,YACE,kBAAM,EAAK9C,UAAS,iBAAO,CAAEpC,UAAWsC,EAAWpD,OAAO,QAC1D,KAV6C,IAgB7BiG,EAAmBJ,EAA/BnC,WAKR,GAHAV,QAAQC,IAAI,mBAAoBS,GAChCV,QAAQC,IAAI,oBAAqBgD,GA7CR,yBA+CrBvC,EAAqC,CACvCV,QAAQC,IAAI,gBAhDW,wBAiDvB,IAAInC,EAAYuC,KAAKC,MAAMD,KAAKE,UAAUwC,KAAKhD,MAAMjC,YAErDA,EAAUoD,SAAQ,SAACC,GACjBA,EAASlE,WAAY,KAGvB+F,YACE,kBACE,EAAK9C,UAAS,iBAAO,CACnBpC,UAAWA,EACX4C,WA1DgB,4BA4DpB,KAMJ,GAlEwB,wBAkEpBA,EAAoC,CAAC,IAAD,EACNqC,KAAKhD,MAA7BY,EAD8B,EAC9BA,KAAMb,EADwB,EACxBA,cACSoD,EAAsBL,EAArC/C,cACRE,QAAQC,IACN,8CACAiD,GAEFlD,QAAQC,IAAI,6CAA8CH,GACpC,IAAlBA,EA3EmB,yBA4EjBmD,IACFF,KAAKI,OAASC,aAAY,kBAAM,EAAKvD,eAAc,OAGrDwD,cAAcN,KAAKI,QACnBJ,KAAK7C,UAAS,iBAAO,CACnBQ,WAhFO,gBAoFE,IAATC,IACF0C,cAAcN,KAAKI,QACnBJ,KAAK7C,UAAS,iBAAO,CAAEQ,WAtFd,6BA4FTA,GACF2C,cAAcN,KAAKI,QAKrB,IAAIG,EAAOC,SAASC,gBAEC,SAAjBd,GACFY,EAAKG,MAAMC,YAAY,YAAa,WACpCJ,EAAKG,MAAMC,YAAY,cAAe,WACtCJ,EAAKG,MAAMC,YAAY,eAAgB,WACvCJ,EAAKG,MAAMC,YAAY,iBAAkB,WACzCJ,EAAKG,MAAMC,YAAY,gBAAiB,QACd,SAAjBhB,GACTY,EAAKG,MAAMC,YAAY,YAAa,WACpCJ,EAAKG,MAAMC,YAAY,cAAe,WACtCJ,EAAKG,MAAMC,YAAY,eAAgB,WACvCJ,EAAKG,MAAMC,YAAY,iBAAkB,WACzCJ,EAAKG,MAAMC,YAAY,gBAAiB,QACd,WAAjBhB,GACTY,EAAKG,MAAMC,YAAY,YAAa,WACpCJ,EAAKG,MAAMC,YAAY,cAAe,WACtCJ,EAAKG,MAAMC,YAAY,eAAgB,WACvCJ,EAAKG,MAAMC,YAAY,iBAAkB,WACzCJ,EAAKG,MAAMC,YAAY,gBAAiB,YACd,SAAjBhB,GACTY,EAAKG,MAAMC,YAAY,YAAa,WACpCJ,EAAKG,MAAMC,YAAY,cAAe,WACtCJ,EAAKG,MAAMC,YAAY,eAAgB,WACvCJ,EAAKG,MAAMC,YAAY,iBAAkB,WACzCJ,EAAKG,MAAMC,YAAY,gBAAiB,aAExCJ,EAAKG,MAAMC,YAAY,YAAa,WACpCJ,EAAKG,MAAMC,YAAY,cAAe,aACtCJ,EAAKG,MAAMC,YAAY,eAAgB,YACvCJ,EAAKG,MAAMC,YAAY,iBAAkB,WACzCJ,EAAKG,MAAMC,YAAY,gBAAiB,c,+BAwMlC,IAAD,SAgBHX,KAAKhD,MAdPrC,EAFK,EAELA,UACAC,EAHK,EAGLA,UACAG,EAJK,EAILA,UACAd,EALK,EAKLA,MACA8D,EANK,EAMLA,YACAE,EAPK,EAOLA,iBACAL,EARK,EAQLA,KACAe,EATK,EASLA,gBACAC,EAVK,EAULA,gBACA7B,EAXK,EAWLA,cACAY,EAZK,EAYLA,WACA6B,EAbK,EAaLA,iBACAI,EAdK,EAcLA,aACAD,EAfK,EAeLA,aAGF,OADA1C,QAAQC,IAAI,aAEV,yBACElD,UAAS,8BAAyB2F,EAAaiB,oBAAtC,WAET,yBAAK5G,UAAU,UACb,yBAAKA,UAAU,SACb,wBAAIA,UAAU,QAAQgG,KAAKzB,eAAeX,KAE5C,yBAAK5D,UAAU,gBACb,2BAAIgG,KAAK1B,kBACT,4BAAQuC,KAAK,SAAS1G,QAAS,kBAAM,EAAK+D,sBACxC,uBAAGlE,UAAU,kBAIjB,uBAAGA,UAAU,SAAb,SACS,IAES,GAAd+D,EAAgC,GAAZ,EAAIH,IAI5B,yBAAK5D,UAAU,WAAWG,QAAS,kBAAM,EAAKoF,mBAC5C,uBAAGvF,UAAU,gBAEf,yBACEA,UAAS,wBACPwF,EAAmB,kBAAoB,oBAGzC,kBAAC,EAAD,CACE7D,MAAM,oBACND,KAAK,cACLG,QAAS+C,EACThD,MAAOjB,EACPmB,SAAU,SAAC4C,GAAD,OAAO,EAAKD,eAAeC,MAEvC,kBAAC,EAAD,CACE/C,MAAM,uBACND,KAAK,cACLG,QAAS8C,EACT/C,MAAOhB,EACPkB,SAAU,SAAC4C,GAAD,OAAO,EAAKD,eAAeC,MAEvC,kBAAC,EAAD,CACE/C,MAAM,iBACND,KAAK,QACLG,QAAS+D,EACThE,MAAO+D,EACP7D,SAAU,SAAC4C,GAAD,OAAO,EAAKgB,YAAYhB,QAIxC,yBAAK1E,UAAU,qBACb,yBAAKA,UAAU,YACb,qCAnZgB,wBAoZd2D,EAAA,UAAwCZ,EAAxC,KAA2D,KAE7D,uBAAG/C,UAAS,UAAKgG,KAAKP,oBACtB,8BACEpD,GAAG,UACHrC,UAAS,UAAuB,MAAlB+C,EAAwB,YAAc,IACpDnB,MAAOmB,EACP+D,IAAI,SAGR,kBAAC,EAAD,CACEnG,UAAWA,EACXC,UAAWA,EACXT,QAAS,SAACW,GAAD,OAAO,EAAKsC,YAAYtC,IACjCC,UAAWA,EACXd,MAAOA,EACPgB,kBAAmBgD,U,GAjaN8C,IAAMC,WCzBhBC,MARf,WACE,OACE,yBAAKjH,UAAU,OACb,kBAAC,EAAD,QCKckH,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjB,SAASkB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhI,GACLgD,QAAQhD,MAAMA,EAAMiI,c","file":"static/js/main.1d184c1e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/batman.bd83c4a2.png\";","import React from \"react\";\r\nimport \"./style.css\";\r\nimport batman from \"./batman.png\";\r\n\r\nconst Card = (props) => {\r\n  const { face } = props;\r\n  const isClicked = () => {\r\n    return face.isFlipped ? \"isClicked\" : \"\";\r\n  };\r\n\r\n  const cardErrorClass = () => {\r\n    const { error } = props;\r\n    return error ? `scene-error` : \"\";\r\n  };\r\n\r\n  return (\r\n    <div className={`scene ${cardErrorClass()}`}>\r\n      <div className={`card ${isClicked()}`} onClick={props.onClick}>\r\n        <div className=\"card-face face-front\">{face.dataItem}</div>\r\n        <div className=\"card-face face-back\">\r\n          <img width=\"47px\" height=\"57px\" src={batman} alt=\"Front\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card/Card\";\r\n\r\nconst CardDeck = (props) => {\r\n  const { rowNumber, colNumber } = props;\r\n  const createCard = (i) => {\r\n    const { viewFaces } = props;\r\n\r\n    const findErrorCard = () => {\r\n      const { error, selectedCardIndex } = props;\r\n      return error && selectedCardIndex === i;\r\n    };\r\n    return (\r\n      <Card\r\n        key={`card${i}`}\r\n        onClick={() => props.onClick(i)}\r\n        face={viewFaces[i]}\r\n        error={findErrorCard()}\r\n      />\r\n    );\r\n  };\r\n\r\n  const createCardDeckRow = (i) => {\r\n    const cardDeckRow = [];\r\n    for (let j = 0; j < colNumber; j++) {\r\n      cardDeckRow.push(createCard(i + j));\r\n    }\r\n\r\n    return cardDeckRow;\r\n  };\r\n\r\n  const createCardDeck = () => {\r\n    const cardDeckComponent = [];\r\n    for (let i = 0; i < rowNumber; i++) {\r\n      cardDeckComponent.push(\r\n        <div className=\"card-deck-row\" key={`row-${i}`}>\r\n          {createCardDeckRow(colNumber * i)}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return cardDeckComponent;\r\n  };\r\n\r\n  return (\r\n    <div className={`card-deck card-deck-${rowNumber}-${colNumber}`}>\r\n      {createCardDeck()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardDeck;\r\n","import React from \"react\";\r\n\r\nconst Dropdown = (props) => {\r\n  const { name, label, value, options } = props;\r\n  return (\r\n    <div className={name}>\r\n      <label>\r\n        {label}\r\n        <select value={value} onChange={props.onChange} name={name}>\r\n          {options.map((option) => (\r\n            <option value={option} key={\"row\" + option}>\r\n              {option}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dropdown;\r\n","import React from \"react\";\r\nimport CardDeck from \"./CardDeck\";\r\nimport Dropdown from \"./Dropdown\";\r\nimport \"./theme.css\";\r\n\r\nconst actualCardFaces = [1, 2, 3, 4, 5, 6, 7, 8];\r\n\r\nlet viewFaces = actualCardFaces.concat(actualCardFaces);\r\n\r\nviewFaces = viewFaces.map((element, index) => {\r\n  return {\r\n    id: index,\r\n    dataItem: element,\r\n    isFlipped: true,\r\n  };\r\n});\r\n\r\nconst shuffle = (array) => {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    let j = Math.floor(Math.random() * (i + 1));\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n};\r\n\r\nshuffle(viewFaces);\r\n\r\nconst defaultRowNumber = 4;\r\nconst defaultColNumber = 4;\r\nconst cardNumberOptions = [3, 4, 5, 6];\r\nconst defaultTimeRemaining = 120;\r\nconst defaultTheme = \"Cyan\";\r\n\r\nconst GAME_PRE_START = \"GAME_PRE_START\";\r\nconst GAME_START_UNFLIPPED = \"GAME_START_UNFLIPPED\";\r\nconst GAME_MIDDLE_FLIPPED = \"GAME_MIDDLE_FLIPPED\";\r\nconst GAME_END = \"GAME_END\";\r\n\r\nclass MemoryGame extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      viewFaces: viewFaces,\r\n      rowNumber: defaultRowNumber,\r\n      colNumber: defaultColNumber,\r\n      flippedForMatch: false,\r\n      clickedCardIndex: undefined,\r\n      pairMatched: 0,\r\n      error: false,\r\n      life: 5,\r\n      gameStatus: GAME_PRE_START,\r\n      boardRowOptions: cardNumberOptions,\r\n      boardColOptions: cardNumberOptions,\r\n      timeRemaining: defaultTimeRemaining,\r\n      isSettingsOpened: false,\r\n      themeOptions: [\"Blue\", \"Dark\", \"Bright\", \"Cyan\", \"Brick\"],\r\n      currentTheme: defaultTheme,\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    const { error, clickedCardIndex, gameStatus, currentTheme } = this.state;\r\n\r\n    // for card flipping with click.........................\r\n\r\n    if (error) {\r\n      const cardFaces = JSON.parse(JSON.stringify(this.state.viewFaces));\r\n      cardFaces[clickedCardIndex].isFlipped = true;\r\n      setTimeout(\r\n        () => this.setState(() => ({ viewFaces: cardFaces, error: false })),\r\n        900\r\n      );\r\n    }\r\n    //....................................................................\r\n\r\n    //controlling game life cycle.........................................\r\n    const { gameStatus: prevGameStatus } = prevState;\r\n\r\n    console.log(\"current status: \", gameStatus);\r\n    console.log(\"previous status: \", prevGameStatus);\r\n\r\n    if (gameStatus === GAME_START_UNFLIPPED) {\r\n      console.log(\"game status: \", GAME_START_UNFLIPPED);\r\n      let viewFaces = JSON.parse(JSON.stringify(this.state.viewFaces));\r\n\r\n      viewFaces.forEach((viewFace) => {\r\n        viewFace.isFlipped = true;\r\n      });\r\n\r\n      setTimeout(\r\n        () =>\r\n          this.setState(() => ({\r\n            viewFaces: viewFaces,\r\n            gameStatus: GAME_MIDDLE_FLIPPED,\r\n          })),\r\n        1000\r\n      );\r\n    }\r\n\r\n    // end game when life ends and starting timebar when game starts\r\n\r\n    if (gameStatus === GAME_MIDDLE_FLIPPED) {\r\n      const { life, timeRemaining } = this.state;\r\n      const { timeRemaining: prevTimeRemaining } = prevState;\r\n      console.log(\r\n        \"previous time remaining................:   \",\r\n        prevTimeRemaining\r\n      );\r\n      console.log(\"current time remaining................:   \", timeRemaining);\r\n      if (timeRemaining !== 0) {\r\n        if (prevGameStatus === GAME_START_UNFLIPPED) {\r\n          this.timeID = setInterval(() => this.handleTime(), 1000);\r\n        }\r\n      } else {\r\n        clearInterval(this.timeID);\r\n        this.setState(() => ({\r\n          gameStatus: GAME_END,\r\n        }));\r\n      }\r\n\r\n      if (life === 0) {\r\n        clearInterval(this.timeID);\r\n        this.setState(() => ({ gameStatus: GAME_END }));\r\n      }\r\n    }\r\n\r\n    // ...........................................................................\r\n\r\n    if (gameStatus === GAME_END) {\r\n      clearInterval(this.timeID);\r\n    }\r\n\r\n    // Theme update.....................................\r\n\r\n    let root = document.documentElement;\r\n\r\n    if (currentTheme === \"Blue\") {\r\n      root.style.setProperty(\"--primary\", \"#6b9080\");\r\n      root.style.setProperty(\"--secondary\", \"#a4c3b2\");\r\n      root.style.setProperty(\"--light-tone\", \"#eaf4f4\");\r\n      root.style.setProperty(\"--lighter-tone\", \"#f6fff8\");\r\n      root.style.setProperty(\"--error-color\", \"red\");\r\n    } else if (currentTheme === \"Dark\") {\r\n      root.style.setProperty(\"--primary\", \"#0b0b0d\");\r\n      root.style.setProperty(\"--secondary\", \"#474a56\");\r\n      root.style.setProperty(\"--light-tone\", \"#929aab\");\r\n      root.style.setProperty(\"--lighter-tone\", \"#d3d5fd\");\r\n      root.style.setProperty(\"--error-color\", \"red\");\r\n    } else if (currentTheme === \"Bright\") {\r\n      root.style.setProperty(\"--primary\", \"#f60c86\");\r\n      root.style.setProperty(\"--secondary\", \"#11cbd7\");\r\n      root.style.setProperty(\"--light-tone\", \"#9feed1\");\r\n      root.style.setProperty(\"--lighter-tone\", \"#9feed1\");\r\n      root.style.setProperty(\"--error-color\", \"#11cbd7\");\r\n    } else if (currentTheme === \"Cyan\") {\r\n      root.style.setProperty(\"--primary\", \"#006c9a\");\r\n      root.style.setProperty(\"--secondary\", \"#00bebe\");\r\n      root.style.setProperty(\"--light-tone\", \"#00f3e4\");\r\n      root.style.setProperty(\"--lighter-tone\", \"#9ff9c1\");\r\n      root.style.setProperty(\"--error-color\", \"#00f3e4\");\r\n    } else {\r\n      root.style.setProperty(\"--primary\", \"#031f41\");\r\n      root.style.setProperty(\"--secondary\", \"#1b1b2f57\");\r\n      root.style.setProperty(\"--light-tone\", \" #963041\");\r\n      root.style.setProperty(\"--lighter-tone\", \"#1f4068\");\r\n      root.style.setProperty(\"--error-color\", \"#d6475f\");\r\n    }\r\n  }\r\n\r\n  handleTime = () => {\r\n    const { timeRemaining } = this.state;\r\n    console.log(\"Inside timebar function\");\r\n    this.setState(() => ({\r\n      timeRemaining: timeRemaining - 1,\r\n    }));\r\n  };\r\n\r\n  handleClick = (i) => {\r\n    const cardFaces = JSON.parse(JSON.stringify(this.state.viewFaces));\r\n    const cardFace = cardFaces[i];\r\n    const { flippedForMatch, gameStatus, life } = this.state;\r\n    if (gameStatus === GAME_MIDDLE_FLIPPED) {\r\n      if (flippedForMatch && cardFace.isFlipped) {\r\n        const cardFaceMatched = cardFaces.find((card) => {\r\n          if (\r\n            card.id !== cardFace.id &&\r\n            !card.isFlipped &&\r\n            card.dataItem === cardFace.dataItem\r\n          ) {\r\n            cardFace.isFlipped = false;\r\n            const { rowNumber, colNumber, pairMatched } = this.state;\r\n\r\n            //finding the number of pair already matched before next pair match: to find all the cards\r\n            // have been flipped or not\r\n            const isGameEnd = pairMatched === (rowNumber * colNumber) / 2 - 1;\r\n            ////////////////\r\n\r\n            this.setState(() => ({\r\n              viewFaces: cardFaces,\r\n              flippedForMatch: false,\r\n              pairMatched: pairMatched + 1,\r\n              error: false,\r\n              clickedCardIndex: i,\r\n              gameStatus: isGameEnd ? GAME_END : GAME_MIDDLE_FLIPPED,\r\n            }));\r\n            return true;\r\n          }\r\n\r\n          return false;\r\n        });\r\n\r\n        if (!cardFaceMatched) {\r\n          cardFace.isFlipped = false;\r\n          this.setState(() => ({\r\n            viewFaces: cardFaces,\r\n            error: true,\r\n            clickedCardIndex: i,\r\n            life: life - 1,\r\n          }));\r\n        }\r\n      } else {\r\n        cardFace.isFlipped = false;\r\n        this.setState(() => ({\r\n          viewFaces: cardFaces,\r\n          flippedForMatch: true,\r\n          clickedCardIndex: i,\r\n        }));\r\n      }\r\n    }\r\n  };\r\n\r\n  handleGameControl = () => {\r\n    const { gameStatus } = this.state;\r\n    if (gameStatus === GAME_PRE_START || gameStatus === GAME_END) {\r\n      let viewFaces = JSON.parse(JSON.stringify(this.state.viewFaces));\r\n      viewFaces.forEach((viewFace) => {\r\n        viewFace.isFlipped = false;\r\n      });\r\n\r\n      shuffle(viewFaces);\r\n\r\n      this.setState(() => ({\r\n        viewFaces: viewFaces,\r\n        gameStatus: GAME_START_UNFLIPPED,\r\n        pairMatched: 0,\r\n        flippedForMatch: false,\r\n        clickedCardIndex: undefined,\r\n        error: false,\r\n        life: 5,\r\n        timeRemaining: defaultTimeRemaining,\r\n      }));\r\n    }\r\n  };\r\n\r\n  gameStatusInfo = () => {\r\n    const { gameStatus } = this.state;\r\n    return gameStatus === GAME_PRE_START\r\n      ? \"Start Game\"\r\n      : gameStatus === GAME_START_UNFLIPPED\r\n      ? \"Remember the Cards\"\r\n      : gameStatus === GAME_MIDDLE_FLIPPED\r\n      ? \"Flip and Match the Cards\"\r\n      : \"Game over! play again?\";\r\n  };\r\n\r\n  renderLifeList = (life) => {\r\n    let lifeArray = [];\r\n    for (let i = 0; i < life; i += 1) {\r\n      lifeArray.push(\r\n        <li key={i}>\r\n          <i className=\"far fa-heart\"></i>\r\n        </li>\r\n      );\r\n    }\r\n\r\n    return lifeArray;\r\n  };\r\n\r\n  handleDropdown = (e) => {\r\n    const {\r\n      rowNumber,\r\n      colNumber,\r\n      gameStatus,\r\n      boardColOptions,\r\n      boardRowOptions,\r\n    } = this.state;\r\n\r\n    if (gameStatus === GAME_PRE_START || gameStatus === GAME_END) {\r\n      const value = e.target.value;\r\n\r\n      const targetName = e.target.getAttribute(\"name\");\r\n\r\n      const isRowChange = targetName === \"row-options\";\r\n\r\n      const newColNumber = isRowChange ? colNumber : value;\r\n      const newRowNumber = isRowChange ? value : rowNumber;\r\n\r\n      const halfNumberCards = (newColNumber * newRowNumber) / 2;\r\n      let actualCardFaces = [];\r\n      for (let i = 0; i < halfNumberCards; i++) {\r\n        actualCardFaces.push(i);\r\n      }\r\n\r\n      let viewFaces = actualCardFaces.concat(actualCardFaces);\r\n\r\n      viewFaces = viewFaces.map((element, index) => {\r\n        return {\r\n          id: index,\r\n          dataItem: element,\r\n          isFlipped: true,\r\n        };\r\n      });\r\n\r\n      const shuffle = (array) => {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n          let j = Math.floor(Math.random() * (i + 1));\r\n          [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n      };\r\n\r\n      shuffle(viewFaces);\r\n\r\n      let newBoardColOptions = isRowChange\r\n        ? cardNumberOptions.filter((col) => {\r\n            return value % 2 === 0 ? true : col % 2 === 0 ? true : false;\r\n          })\r\n        : boardColOptions;\r\n\r\n      let newBoardRowOptions = !isRowChange\r\n        ? cardNumberOptions.filter((col) => {\r\n            return value % 2 === 0 ? true : col % 2 === 0 ? true : false;\r\n          })\r\n        : boardRowOptions;\r\n\r\n      this.setState(() => ({\r\n        viewFaces: viewFaces,\r\n        rowNumber: newRowNumber,\r\n        colNumber: newColNumber,\r\n        boardColOptions: newBoardColOptions,\r\n        boardRowOptions: newBoardRowOptions,\r\n      }));\r\n    }\r\n  };\r\n\r\n  handleSettings = () => {\r\n    const { isSettingsOpened } = this.state;\r\n    this.setState(() => ({ isSettingsOpened: !isSettingsOpened }));\r\n  };\r\n\r\n  handleTimeIcon = () => {\r\n    const { gameStatus } = this.state;\r\n    const iconClass =\r\n      gameStatus === GAME_PRE_START || gameStatus === GAME_START_UNFLIPPED\r\n        ? \"fas fa-hourglass-start\"\r\n        : gameStatus === GAME_MIDDLE_FLIPPED\r\n        ? \"far fa-hourglass game-started\"\r\n        : \"fas fa-hourglass-end\";\r\n    return iconClass;\r\n  };\r\n\r\n  handleTheme = (e) => {\r\n    const value = e.target.value;\r\n    this.setState(() => ({ currentTheme: value }));\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      rowNumber,\r\n      colNumber,\r\n      viewFaces,\r\n      error,\r\n      pairMatched,\r\n      clickedCardIndex,\r\n      life,\r\n      boardColOptions,\r\n      boardRowOptions,\r\n      timeRemaining,\r\n      gameStatus,\r\n      isSettingsOpened,\r\n      themeOptions,\r\n      currentTheme,\r\n    } = this.state;\r\n    console.log(\"rendering\");\r\n    return (\r\n      <div\r\n        className={`memory-game-wrapper ${currentTheme.toLocaleLowerCase()}-theme`}\r\n      >\r\n        <div className=\"status\">\r\n          <div className=\"score\">\r\n            <ul className=\"life\">{this.renderLifeList(life)}</ul>\r\n          </div>\r\n          <div className=\"game-control\">\r\n            <p>{this.gameStatusInfo()}</p>\r\n            <button type=\"submit\" onClick={() => this.handleGameControl()}>\r\n              <i className=\"fas fa-play\"></i>\r\n            </button>\r\n          </div>\r\n\r\n          <p className=\"point\">\r\n            Point:{\" \"}\r\n            {\r\n              pairMatched * 10 - (5 - life) * 5\r\n              /*10 points for each matching pait, -5 points for each error*/\r\n            }\r\n          </p>\r\n          <div className=\"settings\" onClick={() => this.handleSettings()}>\r\n            <i className=\"fas fa-cog\"></i>\r\n          </div>\r\n          <div\r\n            className={`board-control ${\r\n              isSettingsOpened ? \"settings-opened\" : \"settings-closed\"\r\n            }`}\r\n          >\r\n            <Dropdown\r\n              label=\"Pick row number: \"\r\n              name=\"row-options\"\r\n              options={boardRowOptions}\r\n              value={rowNumber}\r\n              onChange={(e) => this.handleDropdown(e)}\r\n            />\r\n            <Dropdown\r\n              label=\"Pick column number: \"\r\n              name=\"col-options\"\r\n              options={boardColOptions}\r\n              value={colNumber}\r\n              onChange={(e) => this.handleDropdown(e)}\r\n            />\r\n            <Dropdown\r\n              label=\"Choose theme: \"\r\n              name=\"theme\"\r\n              options={themeOptions}\r\n              value={currentTheme}\r\n              onChange={(e) => this.handleTheme(e)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"card-deck-wrapper\">\r\n          <div className=\"time-bar\">\r\n            <p>{`${\r\n              gameStatus === GAME_MIDDLE_FLIPPED ? `${timeRemaining}s` : \"\"\r\n            }`}</p>\r\n            <i className={`${this.handleTimeIcon()}`}></i>\r\n            <progress\r\n              id=\"timebar\"\r\n              className={`${timeRemaining === 120 ? \"time-full\" : \"\"}`}\r\n              value={timeRemaining}\r\n              max=\"120\"\r\n            ></progress>\r\n          </div>\r\n          <CardDeck\r\n            rowNumber={rowNumber}\r\n            colNumber={colNumber}\r\n            onClick={(i) => this.handleClick(i)}\r\n            viewFaces={viewFaces}\r\n            error={error}\r\n            selectedCardIndex={clickedCardIndex}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MemoryGame;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport MemoryGame from \"./Components/MemoryGame\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <MemoryGame />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}